name: Build and Release Sysguage

on:
  push:
    tags:
      - "v*.*.*" # Triggers on version tags like v1.0.0
  workflow_dispatch: # Allows manual triggering

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            arch: x64
          - os: ubuntu-latest
            arch: arm64
          - os: windows-latest
            arch: x64
          - os: windows-latest
            arch: arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: List Repository Files
        run: ls -R
        # This helps verify that CMakeLists.txt is present

      - name: Cache CMake (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/cache@v4
        with:
          path: ~/.cmake
          key: ${{ runner.os }}-cmake-${{ hashFiles('CMakeLists.txt') }}
          restore-keys: |
            ${{ runner.os }}-cmake-

      - name: Cache CMake (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/cache@v4
        with:
          path: C:\Program Files\CMake
          key: ${{ runner.os }}-cmake-${{ hashFiles('CMakeLists.txt') }}
          restore-keys: |
            ${{ runner.os }}-cmake-

      - name: Setup CMake
        uses: lukka/get-cmake@v3.26.4
        with:
          cmake-version: "3.25.0"

      - name: Cache Build Directory
        uses: actions/cache@v4
        with:
          path: build
          key: ${{ runner.os }}-build-${{ hashFiles('CMakeLists.txt') }}
          restore-keys: |
            ${{ runner.os }}-build-

      - name: Install Dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential ninja-build

      - name: Install Dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install ninja -y
          echo "Ninja installed."

      - name: Configure CMake
        run: |
          mkdir -p build
          cd build
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            cmake .. -A ${{ matrix.arch }} -G "Ninja" -DCMAKE_BUILD_TYPE=Release
          else
            cmake .. -DCMAKE_SYSTEM_PROCESSOR=${{ matrix.arch }} -G "Ninja" -DCMAKE_BUILD_TYPE=Release
          fi

      - name: Build
        run: |
          cd build
          cmake --build . --config Release --parallel

      - name: Package Binary
        run: |
          mkdir -p dist
          cd build
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            cp Release/sysguage.exe ../dist/sysguage-${{ matrix.os }}-${{ matrix.arch }}.exe
          else
            cp sysguage ../dist/sysguage-${{ matrix.os }}-${{ matrix.arch }}
          fi

      - name: Compress Package
        run: |
          cd dist
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            zip sysguage-${{ matrix.os }}-${{ matrix.arch }}.zip sysguage-${{ matrix.os }}-${{ matrix.arch }}.exe
          else
            zip sysguage-${{ matrix.os }}-${{ matrix.arch }}.zip sysguage-${{ matrix.os }}-${{ matrix.arch }}
          fi

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: sysguage-${{ matrix.os }}-${{ matrix.arch }}
          path: dist/sysguage-${{ matrix.os }}-${{ matrix.arch }}.zip

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          name: sysguage-*
          path: dist

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          body: |
            ### Sysguage Release ${{ github.ref_name }}
            Binaries are available for download.

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
