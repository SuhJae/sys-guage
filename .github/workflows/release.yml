name: Build and Release

on:
  release:
    types: [created]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
      - uses: actions/checkout@v3

      # Install dependencies for 32-bit build on Linux
      - name: Install 32-bit Libraries (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-multilib g++-multilib

      # Set up CMake
      - name: Set up CMake
        uses: lukka/get-cmake@v3

      # Build for Linux x86
      - name: Build (Linux x86)
        if: runner.os == 'Linux'
        run: |
          mkdir build
          cd build
          cmake -DCMAKE_C_FLAGS="-m32" -DCMAKE_CXX_FLAGS="-m32" ..
          cmake --build .

      # Build for Windows x86
      - name: Build (Windows x86)
        if: runner.os == 'Windows'
        run: |
          mkdir build
          cd build
          cmake -A Win32 ..
          cmake --build .

      # Archive the binary (Linux)
      - name: Archive Binary (Linux)
        if: runner.os == 'Linux'
        run: |
          cd build
          tar -czvf sysguage-linux.tar.gz sysguage
          mv sysguage-linux.tar.gz ..
        shell: bash

      # Archive the binary (Windows)
      - name: Archive Binary (Windows)
        if: runner.os == 'Windows'
        run: |
          cd build
          Compress-Archive -Path sysguage.exe -DestinationPath sysguage-windows.zip
          Move-Item -Path sysguage-windows.zip -Destination ..
        shell: powershell

      # Upload artifact (Linux)
      - name: Upload Artifact (Linux)
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v3
        with:
          name: sysguage-linux
          path: sysguage-linux.tar.gz

      # Upload artifact (Windows)
      - name: Upload Artifact (Windows)
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v3
        with:
          name: sysguage-windows
          path: sysguage-windows.zip

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    steps:
      - name: Download Artifact (Linux)
        uses: actions/download-artifact@v3
        with:
          name: sysguage-linux

      - name: Upload Release Asset (Linux)
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: sysguage-linux.tar.gz
          asset_name: sysguage-linux.tar.gz
          asset_content_type: application/gzip

      - name: Download Artifact (Windows)
        uses: actions/download-artifact@v3
        with:
          name: sysguage-windows

      - name: Upload Release Asset (Windows)
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: sysguage-windows.zip
          asset_name: sysguage-windows.zip
          asset_content_type: application/zip
